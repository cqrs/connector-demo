services:
  sbt:
    tty: true
    stdin_open: true
    build:
      context: .
      target: builder
    entrypoint: sbt
    command: help
    volumes:
      - .:/usr/src/app:delegated
      - sbt_ivy_cache:/root/.ivy2:cached
      - sbt_cache:/root/.sbt:cached
      - coursier_cache:/root/.cache/coursier:cached
      - coursier_v1_cache:/root/.coursier/cache/v1:cached

  redpanda:
    image: redpandadata/redpanda:v23.3.1
    entrypoint: rpk
    command:
      - redpanda
      - start
      - --mode
      - dev-container
      - --kafka-addr
      - internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers
      # from outside the Docker network.
      - --advertise-kafka-addr
      - internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr
      - internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr
      - internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr
      - internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr
      - redpanda:33145
      - --advertise-rpc-addr
      - redpanda:33145
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    volumes:
      - redpanda:/var/lib/redpanda/data
      - ./data/:/opt/kafka/data:ro

  console:
    image: redpandadata/console:v2.3.8
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
        connect:
          enabled: true
          clusters:
            - name: local-connect-cluster
              url: "http://connect:8083"
    ports:
      - 8080:8080
    depends_on:
      - redpanda

  connect:
    build:
      context: .
    ports:
        - 8083:8083
    depends_on:
      - redpanda
    environment:
      CONNECT_BOOTSTRAP_SERVERS: redpanda:9092
      CONNECT_LOG_LEVEL: debug
      CONNECT_METRICS_ENABLED: false
      CONNECT_PLUGIN_PATH: /opt/kafka/connect-plugins
      CONNECT_CONFIGURATION: |
        key.converter=org.apache.kafka.connect.storage.StringConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        value.converter.schemas.enable=false
        group.id=connectors-group
        offset.storage.topic=_connectors_offsets
        config.storage.topic=_connectors_configs
        status.storage.topic=_connectors_status
        config.storage.replication.factor=-1
        offset.storage.replication.factor=-1
        status.storage.replication.factor=-1
        config.providers=file
        config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
    volumes:
      - ./connect-password/:/opt/kafka/connect-password:ro
      - ./connect-plugins/:/opt/kafka/connect-plugins:ro

  neo4j:
    image: neo4j:5
    ports:
      - 7474:7474 # HTTP
      - 7687:7687 # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
    volumes:
      - neo4j:/data

  postgres:
    image: postgres:16

volumes:
  sbt_ivy_cache: {}
  sbt_cache: {}
  coursier_cache: {}
  coursier_v1_cache: {}
  redpanda: {}
  neo4j: {}
